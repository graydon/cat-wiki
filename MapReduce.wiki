#summary A naive implementation of the Google MapReduce algorithm.
#labels CodeExample

= MapReduce =

MapReduce is the name of an algorithm used by Google for performing distributed computation. The MapReduce algorithm is described in the paper [http://labs.google.com/papers/mapreduce.html MapReduce: Simplified Data Processing on Large Clusters] by Jeffrey Dean and Sanjay Ghemawat. 

In addition to the input data, the MapReduce algorithm requires two functions as arguments. A function for generating intermediate data sets (named "map" in the paper) and a function for combining intermediate data sets into smaller data sets (named "reduce" in the paper). The MapReduce framework then distributes tasks as needed, taking care of the messy details of task scheduling. 

  Note: the map and reduce functions in the paper behave differently than the primitive functions of the same name in Cat and other functional languages.

The following pseduo-code example taken from the paper demonstrates sample input functions to the MapReduce algorithm that count words from multple input documents:

{{{
map(String key, String value):
  // key: document name
  // value: document contents
  for each word w in value:
    EmitIntermediate(w, "1");
  
reduce(String key, Iterator values):
  // key: a word
  // values: a list of counts
  int result = 0;
  for each v in values:
    result += ParseInt(v);
  Emit(AsString(result));
}}}

== Cat Implementation ==

The implementation of a naive non-distributed MapReduce algorithm can be expressed in a one-line Cat program as:

{{{
define map_reduce { [map flatten self_join] dip map }
}}}

In pseudo-code this could be translated to:

{{{
map_reduce(input, fmap, freduce) = 
    map(freduce, self_join(flatten(map(fmap, input))))
}}}

where the types of the arguments could be described as:

{{{
  input = list(pair('input_value, 'input_key))
  fmap = pair('input_value, 'input_key)) -> list(pair('output_value, 'output_key))
  freduce = pair(list('output_value), 'output_key) -> pair('output_value, 'output_key)
}}}

Note that these tyeps are not actually valid Cat types. This is a planned future extension for the type system.

== Example ===

The following demonstrates how the map_reduce algorithm in Cat could be used to 
count words from sentences: 

{{{
define test_strings
{
  (
    (("The", "quick", "brown", "fox", "jumped", "over", "the", "lazy", "dog"), 1),
    (("I", "am", "very", "lazy"), 2),
    (("I", "hope", "this", "is", "over", "quick"), 3),
    (("I", "have", "high", "hopes", "for", "the", "lazy", "dog"), 4)
  )
}

define m
{ unpair pop [1 swap pair] map }

define r
{ unpair [sum] dip pair }

define test_map_reduce
{ test_strings [m] [r] map_reduce print_list }
}}}

The output of this example is:

{{{
( 1, The)
( 1, brown)
( 1, fox)
( 1, jumped)
( 1, am)
( 1, very)
( 1, hope)
( 1, this)
( 1, is)
( 2, over)
( 2, quick)
( 3, I)
( 1, have)
( 1, high)
( 1, hopes)
( 1, for)
( 2, the)
( 3, lazy)
( 2, dog)
}}}





